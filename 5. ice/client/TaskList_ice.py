# -*- coding: utf-8 -*-
#
# Copyright (c) ZeroC, Inc. All rights reserved.
#
#
# Ice version 3.7.10
#
# <auto-generated>
#
# Generated from file `TaskList.ice'
#
# Warning: do not edit this file.
#
# </auto-generated>
#

from sys import version_info as _version_info_
import Ice, IcePy

# Start of module TaskList
_M_TaskList = Ice.openModule('TaskList')
__name__ = 'TaskList'

if 'Task' not in _M_TaskList.__dict__:
    _M_TaskList.Task = Ice.createTempClass()
    class Task(object):
        def __init__(self, name='', description=''):
            self.name = name
            self.description = description

        def __hash__(self):
            _h = 0
            _h = 5 * _h + Ice.getHash(self.name)
            _h = 5 * _h + Ice.getHash(self.description)
            return _h % 0x7fffffff

        def __compare(self, other):
            if other is None:
                return 1
            elif not isinstance(other, _M_TaskList.Task):
                return NotImplemented
            else:
                if self.name is None or other.name is None:
                    if self.name != other.name:
                        return (-1 if self.name is None else 1)
                else:
                    if self.name < other.name:
                        return -1
                    elif self.name > other.name:
                        return 1
                if self.description is None or other.description is None:
                    if self.description != other.description:
                        return (-1 if self.description is None else 1)
                else:
                    if self.description < other.description:
                        return -1
                    elif self.description > other.description:
                        return 1
                return 0

        def __lt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r < 0

        def __le__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r <= 0

        def __gt__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r > 0

        def __ge__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r >= 0

        def __eq__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r == 0

        def __ne__(self, other):
            r = self.__compare(other)
            if r is NotImplemented:
                return r
            else:
                return r != 0

        def __str__(self):
            return IcePy.stringify(self, _M_TaskList._t_Task)

        __repr__ = __str__

    _M_TaskList._t_Task = IcePy.defineStruct('::TaskList::Task', Task, (), (
        ('name', (), IcePy._t_string),
        ('description', (), IcePy._t_string)
    ))

    _M_TaskList.Task = Task
    del Task

if '_t_TaskSeq' not in _M_TaskList.__dict__:
    _M_TaskList._t_TaskSeq = IcePy.defineSequence('::TaskList::TaskSeq', (), _M_TaskList._t_Task)

_M_TaskList._t_TaskListService = IcePy.defineValue('::TaskList::TaskListService', Ice.Value, -1, (), False, True, None, ())

if 'TaskListServicePrx' not in _M_TaskList.__dict__:
    _M_TaskList.TaskListServicePrx = Ice.createTempClass()
    class TaskListServicePrx(Ice.ObjectPrx):

        def addTask(self, task, context=None):
            return _M_TaskList.TaskListService._op_addTask.invoke(self, ((task, ), context))

        def addTaskAsync(self, task, context=None):
            return _M_TaskList.TaskListService._op_addTask.invokeAsync(self, ((task, ), context))

        def begin_addTask(self, task, _response=None, _ex=None, _sent=None, context=None):
            return _M_TaskList.TaskListService._op_addTask.begin(self, ((task, ), _response, _ex, _sent, context))

        def end_addTask(self, _r):
            return _M_TaskList.TaskListService._op_addTask.end(self, _r)

        def removeTask(self, index, context=None):
            return _M_TaskList.TaskListService._op_removeTask.invoke(self, ((index, ), context))

        def removeTaskAsync(self, index, context=None):
            return _M_TaskList.TaskListService._op_removeTask.invokeAsync(self, ((index, ), context))

        def begin_removeTask(self, index, _response=None, _ex=None, _sent=None, context=None):
            return _M_TaskList.TaskListService._op_removeTask.begin(self, ((index, ), _response, _ex, _sent, context))

        def end_removeTask(self, _r):
            return _M_TaskList.TaskListService._op_removeTask.end(self, _r)

        def getTaskList(self, context=None):
            return _M_TaskList.TaskListService._op_getTaskList.invoke(self, ((), context))

        def getTaskListAsync(self, context=None):
            return _M_TaskList.TaskListService._op_getTaskList.invokeAsync(self, ((), context))

        def begin_getTaskList(self, _response=None, _ex=None, _sent=None, context=None):
            return _M_TaskList.TaskListService._op_getTaskList.begin(self, ((), _response, _ex, _sent, context))

        def end_getTaskList(self, _r):
            return _M_TaskList.TaskListService._op_getTaskList.end(self, _r)

        @staticmethod
        def checkedCast(proxy, facetOrContext=None, context=None):
            return _M_TaskList.TaskListServicePrx.ice_checkedCast(proxy, '::TaskList::TaskListService', facetOrContext, context)

        @staticmethod
        def uncheckedCast(proxy, facet=None):
            return _M_TaskList.TaskListServicePrx.ice_uncheckedCast(proxy, facet)

        @staticmethod
        def ice_staticId():
            return '::TaskList::TaskListService'
    _M_TaskList._t_TaskListServicePrx = IcePy.defineProxy('::TaskList::TaskListService', TaskListServicePrx)

    _M_TaskList.TaskListServicePrx = TaskListServicePrx
    del TaskListServicePrx

    _M_TaskList.TaskListService = Ice.createTempClass()
    class TaskListService(Ice.Object):

        def ice_ids(self, current=None):
            return ('::Ice::Object', '::TaskList::TaskListService')

        def ice_id(self, current=None):
            return '::TaskList::TaskListService'

        @staticmethod
        def ice_staticId():
            return '::TaskList::TaskListService'

        def addTask(self, task, current=None):
            raise NotImplementedError("servant method 'addTask' not implemented")

        def removeTask(self, index, current=None):
            raise NotImplementedError("servant method 'removeTask' not implemented")

        def getTaskList(self, current=None):
            raise NotImplementedError("servant method 'getTaskList' not implemented")

        def __str__(self):
            return IcePy.stringify(self, _M_TaskList._t_TaskListServiceDisp)

        __repr__ = __str__

    _M_TaskList._t_TaskListServiceDisp = IcePy.defineClass('::TaskList::TaskListService', TaskListService, (), None, ())
    TaskListService._ice_type = _M_TaskList._t_TaskListServiceDisp

    TaskListService._op_addTask = IcePy.Operation('addTask', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), _M_TaskList._t_Task, False, 0),), (), None, ())
    TaskListService._op_removeTask = IcePy.Operation('removeTask', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (((), IcePy._t_int, False, 0),), (), None, ())
    TaskListService._op_getTaskList = IcePy.Operation('getTaskList', Ice.OperationMode.Normal, Ice.OperationMode.Normal, False, None, (), (), (), ((), _M_TaskList._t_TaskSeq, False, 0), ())

    _M_TaskList.TaskListService = TaskListService
    del TaskListService

# End of module TaskList
